{
  "version": 2,
  "outputCapture": "direct-nodejs",
  "$schema": "http://json-schema.org/schema",
  "$id": "jscutlery-semver-version",
  "title": "JSCutlery Version builder",
  "description": "Automate versioning and CHANGELOG generation.",
  "type": "object",
  "properties": {
    "dryRun": {
      "description": "See what commands would be run, without committing to git or updating files.",
      "type": "boolean",
      "default": false
    },
    "noVerify": {
      "description": "Bypass pre-commit or commit-msg git hooks during the commit phase.",
      "type": "boolean",
      "default": false
    },
    "changelogHeader": {
      "description": "Generates changelog with custom header.",
      "type": "string"
    },
    "push": {
      "description": "Pushes to the git remote.",
      "type": "boolean",
      "default": false
    },
    "remote": {
      "description": "Pushes against git remote repository.",
      "type": "string",
      "default": "origin"
    },
    "baseBranch": {
      "description": "Pushes against git base branch.",
      "type": "string",
      "default": "main"
    },
    "syncVersions": {
      "description": "Sync all package versions.",
      "type": "boolean",
      "default": false
    },
    "skipRootChangelog": {
      "description": "Skip root CHANGELOG generation containing all monorepo changes (only with sync mode).",
      "type": "boolean",
      "default": false
    },
    "skipProjectChangelog": {
      "description": "Skip project CHANGELOG generation (only with sync mode).",
      "type": "boolean",
      "default": false
    },
    "releaseAs": {
      "description": "Manually increment the version by that keyword.",
      "type": "string"
    },
    "preid": {
      "description": "Use the next semantic prerelease version with a specific prerelease identifier.",
      "type": "string"
    },
    "tagPrefix": {
      "description": "Version tag prefix. Default is 'v' with the sync mode and '{projectName}-' independent mode.",
      "oneOf": [
        {
          "type": "string"
        },
        {
          "type": "null"
        }
      ]
    },
    "postTargets": {
      "description": "Specify the targets to run after a new version was successfully created.",
      "type": "array",
      "default": [],
      "items": {
        "type": "string",
        "description": "The target to run."
      }
    },
    "trackDeps": {
      "description": "Includes the project's dependencies in calculating a recommended version bump.",
      "type": "boolean",
      "default": false
    },
    "trackDepsWithReleaseAs": {
      "description": "Track dependencies when using releaseAs to calculate recommended version bump.",
      "type": "boolean",
      "default": false
    },
    "allowEmptyRelease": {
      "description": "Allow bumping versions even if there are no changes in the library.",
      "type": "boolean",
      "default": false
    },
    "skipCommit": {
      "description": "Allows to skip making a commit when bumping a version and put the tag on last existent commit.",
      "type": "boolean",
      "default": false
    },
    "skipCommitTypes": {
      "description": "Specify array of commit types to be ignored when calculating next version bump.",
      "type": "array",
      "default": [],
      "items": {
        "type": "string",
        "description": "Type to ignore"
      }
    },
    "commitMessageFormat": {
      "description": "A string to be used to format the auto-generated release commit message.",
      "type": "string",
      "default": "chore({projectName}): release version {version}"
    },
    "preset": {
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "angular",
            "conventional",
            "conventionalcommits",
            "atom",
            "codemirror",
            "ember",
            "eslint",
            "express",
            "jquery",
            "jshint"
          ],
          "default": "angular"
        },
        {
          "$ref": "#/definitions/conventionalChangelogConfiguration"
        }
      ]
    },
    "commitParserOptions": {
      "description": "The options passed to the commit parser.",
      "type": "object",
      "properties": {
        "mergePattern": {
          "description": "Pattern to match merge headers. EG: branch merge, GitHub or GitLab like pull requests headers. When a merge header is parsed, the next line is used for conventional header parsing.",
          "type": "string"
        },
        "mergeCorrespondence": {
          "description": "Used to define what capturing group of mergePattern.",
          "type": "array",
          "items": {
            "type": "string",
            "description": "Merge correspondence types"
          }
        },
        "headerPattern": {
          "description": "Used to match header pattern.",
          "type": "string"
        },
        "headerCorrespondence": {
          "description": "Used to define what capturing group of headerPattern captures what header part. The order of the array should correspond to the order of headerPattern's capturing group. If the part is not captured it is null.",
          "type": "array",
          "items": {
            "type": "string",
            "description": "Header correspondence types"
          }
        },
        "fieldPattern": {
          "description": "Pattern to match other fields.",
          "type": "string"
        },
        "revertPattern": {
          "description": "Pattern to match what this commit reverts.",
          "type": "string"
        },
        "commentChar": {
          "description": "What commentChar to use. By default it is null, so no comments are stripped. Set to # if you pass the contents of .git/COMMIT_EDITMSG directly.",
          "type": "string"
        }
      },
      "required": []
    }
  },
  "definitions": {
    "conventionalChangelogConfiguration": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Conventional Changelog Configuration",
      "description": "Describes the configuration options supported by conventional-config for upstream tooling.",
      "type": "object",
      "required": [],
      "properties": {
        "header": {
          "type": "string",
          "description": "A string to be used as the main header section of the CHANGELOG."
        },
        "types": {
          "description": "An array of `type` objects representing the explicitly supported commit message types, and whether they should show up in generated `CHANGELOG`s.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/type"
          }
        },
        "preMajor": {
          "type": "boolean",
          "description": "Boolean indicating whether or not the action being run (generating CHANGELOG, recommendedBump, etc.) is being performed for a pre-major release (<1.0.0).\n This config setting will generally be set by tooling and not a user."
        },
        "commitUrlFormat": {
          "type": "string",
          "description": "A URL representing a specific commit at a hash.",
          "default": "{{host}}/{{owner}}/{{repository}}/commit/{{hash}}"
        },
        "compareUrlFormat": {
          "type": "string",
          "description": "A URL representing the comparison between two git SHAs.",
          "default": "{{host}}/{{owner}}/{{repository}}/compare/{{previousTag}}...{{currentTag}}"
        },
        "issueUrlFormat": {
          "type": "string",
          "description": "A URL representing the issue format (allowing a different URL format to be swapped in for Gitlab, Bitbucket, etc).",
          "default": "{{host}}/{{owner}}/{{repository}}/issues/{{id}}"
        },
        "userUrlFormat": {
          "type": "string",
          "description": "A URL representing the a user's profile URL on GitHub, Gitlab, etc. This URL is used for substituting @bcoe with https://github.com/bcoe in commit messages."
        },
        "releaseCommitMessageFormat": {
          "type": "string",
          "description": "A string to be used to format the auto-generated release commit message."
        },
        "issuePrefixes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "An array of prefixes used to detect references to issues"
        }
      }
    },
    "type": {
      "description": "An object that describes a commit type's settings in the CHANGELOG",
      "type": "object",
      "properties": {
        "type": {
          "description": "A string used to match <type>s used in the Conventional Commits convention.",
          "type": "string"
        },
        "scope": {
          "description": "A string used to match `[optional scope]` used in the Conventional Commits convention.",
          "type": "string"
        },
        "section": {
          "description": "The section where the matched commit type will display in the CHANGELOG.",
          "type": "string"
        },
        "hidden": {
          "description": "Set to `true` to hide matched commit types in the CHANGELOG.",
          "type": "boolean"
        }
      },
      "required": ["type"],
      "oneOf": [
        {
          "required": ["section"]
        },
        {
          "required": ["hidden"]
        }
      ]
    }
  },
  "required": []
}
